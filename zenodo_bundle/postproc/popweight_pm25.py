# python3 source code for pm25 emulator postprocessor (population-weighting)
# author: Knut von Salzen, email: knut.vonsalzen@canada.ca
#
# call this code after downscale_post_pm25.py and ensure that "indir"
# is pointing to the directory that contains the output generated by
# downscale_post_pm25.py.

import numpy as np
import xarray as xr
import datetime
import sys

### read configuration information

data_in = np.genfromtxt('popweight_pm25.csv', dtype='<U100,<U100,<U100,i', names=True, delimiter=',')
model_dat_file = data_in['model']
model_var = data_in['variable']
nfil = len(model_var)
year = data_in['year']
tinfoi = data_in['tinfo']
tinfo = np.full((nfil),False)
for ndat in range(nfil):
  if tinfoi[ndat] == 'True':
    tinfo[ndat] = True

# emulator input: files for PM2.5 concentrations, name of the directory that contains the files
    
indir = '../'

# directory containting emulator data files

datdir = '../netcdf/'

# diagnose results for AMAP regions or countries
  
separate = False

# i/o routine

def get_coord_size(varn,ncfile):                                # get size of the coordinate array
  coord = ncfile.variables[varn][:]
  ncoord = len(coord)
  return ncoord

# process input files

for ndat in range(nfil):
 print('Input file: '+model_dat_file[ndat]+', variable: '+model_var[ndat])
 if year[ndat] == 2010: # add exception for year 2010 to account for lack of population data
   yearx = 2015
 else:
   yearx = year[ndat]
 
# read input gridded emulator PM2.5 concentration
 
 ncfile   = xr.open_dataset(indir+model_dat_file[ndat]+'.nc')
 nlat     = get_coord_size('lat',ncfile)
 nlon     = get_coord_size('lon',ncfile)
 lat      = ncfile.variables['lat'][:]
 lon      = ncfile.variables['lon'][:]
 pm25i    = ncfile.variables[model_var[ndat]][:]
 if tinfo[ndat]:
   time   = ncfile.variables['time'][:]
   for nt in range(len(time)):
     if int(time[nt]) == yearx:
       pm25 = pm25i[nt,:,:]
 else:
   pm25 = pm25i

# emulator PM2.5 concentration offset (to correct for missing emissions)
  
 model_dat_fileo = datdir+'pm25_offset.nc'
 ncfileo   = xr.open_dataset(model_dat_fileo)
 pm25o    = ncfileo.variables['pm25'][:]
 pm25so    = ncfileo.variables['pm25s'][:]
 pm25bco    = ncfileo.variables['pm25bc'][:]
 pm25oco    = ncfileo.variables['pm25oc'][:]

# sea salt and mineral dust background PM2.5 concentrations
 
 model_dat_filed = datdir+'pm25_sea_salt_dust.nc'
 ncfiled   = xr.open_dataset(model_dat_filed)
 pm25d    = ncfiled.variables['pm25'][:]

# population density (from SSP2 scenario)
     
 pop_dat_file = datdir+'SSP2_POP_GRID_0.5x0.5.nc'
 ncfilep  = xr.open_dataset(pop_dat_file)
 nlatp    = get_coord_size('lat',ncfilep)
 nlonp    = get_coord_size('lon',ncfilep)
 ntimep   = get_coord_size('time',ncfilep)
 latp     = ncfilep.variables['lat'][:]
 lonp     = ncfilep.variables['lon'][:]
 timep    = ncfilep.variables['time'][:]
 pop      = ncfilep.variables['pop'][:]

# regional mask
 
 if separate:
  mask_file = datdir+'grid2gains_amap_BC_2019_separate_AC8.nc'
  ncfilem  = xr.open_dataset(mask_file)
  nlatm    = get_coord_size('lat',ncfilem)
  nlonm    = get_coord_size('lon',ncfilem)
  latm     = ncfilem.variables['lat'][:]
  lonm     = ncfilem.variables['lon'][:]
  ASIO     = ncfilem.variables['ASIO'][:]
  CANA     = ncfilem.variables['CANA'][:]
  CHIN     = ncfilem.variables['CHIN'][:]
  EURO     = ncfilem.variables['EURO'][:]
  INDI     = ncfilem.variables['INDI'][:]
  NORD     = ncfilem.variables['NORD'][:]
  OEUR     = ncfilem.variables['OEUR'][:]
  ROW      = ncfilem.variables['ROW_land'][:]
  RUSS     = ncfilem.variables['RUSS'][:]
  USAM     = ncfilem.variables['USAM'][:]
  ICEL     = ncfilem.variables['ICEL'][:]
  NORW     = ncfilem.variables['NORW'][:]
  DENM     = ncfilem.variables['DENM'][:]
  SWED     = ncfilem.variables['SWED'][:]
  FINL     = ncfilem.variables['FINL'][:]
  GRND     = ncfilem.variables['GRND'][:]
 else:
  mask_file = datdir+'grid2gains_amap_BC_2019_minimal_ship.nc'
  ncfilem  = xr.open_dataset(mask_file)
  nlatm    = get_coord_size('lat',ncfilem)
  nlonm    = get_coord_size('lon',ncfilem)
  latm     = ncfilem.variables['lat'][:]
  lonm     = ncfilem.variables['lon'][:]
  AWEST    = ncfilem.variables['AWEST'][:]
  AEAST    = ncfilem.variables['AEAST'][:]
  ROEUR    = ncfilem.variables['ROEUR'][:]
  ASIA     = ncfilem.variables['ASIA'][:]
  ROW      = ncfilem.variables['ROW'][:]

# copy regions

 if separate:
  nreg = 16
  region = ['ASIO','CANA','CHIN','EURO','INDI','NORD','OEUR','ROW','RUSS','USAM','ICEL','NORW','DENM','SWED','FINL','GRND']
  rheadr = ' ASIO, CANA, CHIN, EURO, INDI, NORD, OEUR,  ROW, RUSS, USAM, ICEL, NORW, DENM, SWED, FINL, GRND'
  rheadrx = '   ASIO,   CANA,   CHIN,   EURO,   INDI,   NORD,   OEUR,    ROW,   RUSS,   USAM,   ICEL,   NORW,   DENM,   SWED,   FINL,   GRND'
  maskreg = np.zeros((nreg,nlat,nlon))
  maskreg[0,:,:] = ASIO[:,:]
  maskreg[1,:,:] = CANA[:,:]
  maskreg[2,:,:] = CHIN[:,:]
  maskreg[3,:,:] = EURO[:,:]
  maskreg[4,:,:] = INDI[:,:]
  maskreg[5,:,:] = NORD[:,:]
  maskreg[6,:,:] = OEUR[:,:]
  maskreg[7,:,:] = ROW[:,:]
  maskreg[8,:,:] = RUSS[:,:]
  maskreg[9,:,:] = USAM[:,:]
  maskreg[10,:,:] = ICEL[:,:]
  maskreg[11,:,:] = NORW[:,:]
  maskreg[12,:,:] = DENM[:,:]
  maskreg[13,:,:] = SWED[:,:]
  maskreg[14,:,:] = FINL[:,:]
  maskreg[15,:,:] = GRND[:,:]
 else:
  nreg = 5
  region = ['AWEST','AEAST','ROEUR','ASIA','ROW']
  rheadr = ' AWEST, AEAST, ROEUR, ASIA, ROW'
  rheadrx = '  AWEST,  AEAST,  ROEUR,   ASIA,    ROW'
  maskreg = np.zeros((nreg,nlat,nlon))
  maskreg[0,:,:] = AWEST[:,:]
  maskreg[1,:,:] = AEAST[:,:]
  maskreg[2,:,:] = ROEUR[:,:]
  maskreg[3,:,:] = ASIA[:,:]
  maskreg[4,:,:] = ROW[:,:]

# check coordinates

 if lon.all() != lonm.all() or lat.all() != latm.all():
  print('incorrect mask or model coordinates')
 if lon.all() != lonp.all() or lat.all() != latp.all():
  print('incorrect population data or model coordinates')

# select year
  
 ina = -9
 tidx = ina
 for n in range(ntimep):
  if timep[n] == year[ndat]:
    tidx = n
 if tidx == ina:
  print('Time not found')
  sys.exit()
 popr = pop[tidx,:,:]

# mean concentrations

 popreg = np.zeros((nreg))
 pmreg  = np.zeros((nreg))
 inan   = np.zeros((nreg))
 for n in range(nreg):
  for j in range(nlat):
    for i in range(nlon):
      if maskreg[n,j,i] > 0:
        if not np.isnan(pm25[j,i]):
          pmreg[n] = pmreg[n] + popr[j,i] * maskreg[n,j,i] * pm25[j,i]
          popreg[n] = popreg[n] + popr[j,i] * maskreg[n,j,i]
        else:
          inan[n] = inan[n] + 1
  pmreg[n] = pmreg[n]/popreg[n]
  popreg[n] = popreg[n]/1.E+06

# write output
  
 if tinfo[ndat]:
  np.savetxt(model_var[ndat]+'_'+model_dat_file[ndat]+'_'+str(yearx)+'.csv', [pmreg], fmt='% 5.2f', delimiter=',', header=rheadr, comments='')
 else:
  np.savetxt(model_var[ndat]+'_'+model_dat_file[ndat]+'.csv', [pmreg], fmt='% 5.2f', delimiter=',', header=rheadr, comments='')
# np.savetxt('pop_reg.csv', [popreg], fmt='% 7.2f', delimiter=',', header=rheadrx, comments='')
